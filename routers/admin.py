from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, func
from sqlalchemy.exc import SQLAlchemyError

from storage import get_user, get_all_users
from config import ADMIN_IDS
from database.models import User

router = Router()

MEDALS = ["üéñ –ó–∞ –≤–∑—è—Ç–∏–µ –∑–∞ —â—ë–∫—É", "ü•â –ó–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ", "ü•à –ó–∞ —Ç—Ä—è—Å–∫—É", "üèÖ –ó–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É Z", "üåü –ó–≤–µ–∑–¥–∞ –ú—É—Å—É–º–±—ã"]


class AdminStates(StatesGroup):
    news_type = State()
    news_text = State()
    medal_action = State()
    medal_user = State()
    medal_select = State()


async def commit_with_rollback(session: AsyncSession):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –æ—Ç–∫–∞—Ç–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    try:
        await session.commit()
        return True
    except SQLAlchemyError as e:
        print(f"Database error: {e}")
        await session.rollback()
        return False


# ===== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏ =====
@router.callback_query(F.data == "admin_news")
async def admin_news_start(callback: CallbackQuery, session: AsyncSession):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¥ –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="news_type_svo")],
        [InlineKeyboardButton(text="üîµ –û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="news_type_zhizhn")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ])
    await callback.message.edit_text(
        "üì¢ <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ—Å—Ç–µ–π:",
        reply_markup=keyboard
    )
    await session.close()


@router.callback_query(F.data.startswith("news_type_"))
async def select_news_type(callback: CallbackQuery, state: FSMContext):
    news_type = callback.data.split("_")[2]
    await state.update_data(news_type=news_type)
    await state.set_state(AdminStates.news_text)

    await callback.message.edit_text(
        f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç {'–≤–∞–∂–Ω—ã—Ö' if news_type == 'svo' else '–æ–±—â–∏—Ö'} –Ω–æ–≤–æ—Å—Ç–µ–π:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]
        ])
    )


@router.message(AdminStates.news_text)
async def send_news_to_users(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
    data = await state.get_data()
    news_type = data.get("news_type")

    if not news_type:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    try:
        stmt = select(User).where(
            User.news_svo == True if news_type == "svo" else User.news_zhizhn == True
        )
        result = await session.execute(stmt)
        subscribers = result.scalars().all()

        success = 0
        for user in subscribers:
            try:
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=f"üì¢ <b>{'üî¥ –í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å' if news_type == 'svo' else 'üîµ –û–±—â–∞—è –Ω–æ–≤–æ—Å—Ç—å'}</b>\n\n"
                         f"{message.text}"
                )
                success += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user.telegram_id}: {e}")

        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"–¢–∏–ø: {'–≤–∞–∂–Ω—ã–µ' if news_type == 'svo' else '–æ–±—â–∏–µ'} –Ω–æ–≤–æ—Å—Ç–∏\n"
            f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}/{len(subscribers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="menu")]]
            )
        )
    except SQLAlchemyError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        print(f"Database error: {e}")
    finally:
        await state.clear()
        await session.close()


# ===== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∞–ª—è–º–∏ =====
@router.callback_query(F.data == "admin_medals")
async def admin_medals_start(callback: CallbackQuery, session: AsyncSession):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéñ –í—ã–¥–∞—Ç—å –º–µ–¥–∞–ª—å", callback_data="medal_action_give")],
        [InlineKeyboardButton(text="‚ùå –ò–∑—ä—è—Ç—å –º–µ–¥–∞–ª—å", callback_data="medal_action_take")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ])
    await callback.message.edit_text(
        "üèÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await session.close()


@router.callback_query(F.data.startswith("medal_action_"))
async def medal_action_select(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    action = callback.data.split("_")[2]
    if action not in ["give", "take"]:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        return

    await state.update_data(medal_action=action)
    await state.set_state(AdminStates.medal_user)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await session.execute(select(User))
        all_users = result.scalars().all()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤ Python, –∞ –Ω–µ –≤ SQL
        if action == "take":
            users = [u for u in all_users if u.awards and len(u.awards) > 0]
            if not users:
                await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏")
                return
        else:
            users = all_users

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
        keyboard_buttons = [
            [InlineKeyboardButton(
                text=f"{user.full_name} (@{user.username})" if user.username else user.full_name,
                callback_data=f"medal_user_{user.telegram_id}"
            )] for user in users
        ]
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_medals")])

        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {'–≤—Ä—É—á–µ–Ω–∏—è' if action == 'give' else '–∏–∑—ä—è—Ç–∏—è'} –º–µ–¥–∞–ª–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print(f"Error: {e}")
    finally:
        await session.close()


@router.callback_query(F.data.startswith("medal_user_"), AdminStates.medal_user)
async def medal_user_select(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        user_id = int(callback.data.split("_")[2])
        user = await get_user(session, user_id)

        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        await state.update_data(medal_user=user_id)
        data = await state.get_data()
        action = data.get("medal_action")

        if action == "take" and not user.awards:
            await callback.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥")
            return

        medals_list = MEDALS if action == "give" else user.awards

        keyboard_buttons = [
            [InlineKeyboardButton(text=medal, callback_data=f"medal_select_{medal}")]
            for medal in medals_list
        ]
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_medals")])

        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∞–ª—å –¥–ª—è {'–≤—Ä—É—á–µ–Ω–∏—è' if action == 'give' else '–∏–∑—ä—è—Ç–∏—è'} "
            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name}:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
        await state.set_state(AdminStates.medal_select)
    except (IndexError, ValueError, SQLAlchemyError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        print(f"Error: {e}")
    finally:
        await session.close()


@router.callback_query(F.data.startswith("medal_select_"), AdminStates.medal_select)
async def medal_final_action(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    try:
        # 1. –†–∞–∑–±–∏—Ä–∞–µ–º callback –¥–∞–Ω–Ω—ã–µ
        medal_name = callback.data.split("_", 2)[2]
        print(f"–í—ã–±—Ä–∞–Ω–∞ –º–µ–¥–∞–ª—å: {medal_name}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        # 2. –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        user_id = data.get("medal_user")
        action = data.get("medal_action")
        print(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: user_id={user_id}, action={action}")

        if not user_id or not action:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã", show_alert=True)
            await state.clear()
            return

        # 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id={user_id}")
        user = await get_user(session, user_id)

        if not user:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if action == "give":
            if medal_name in user.awards:
                await callback.answer("‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ –º–µ–¥–∞–ª—å")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∞–ª—å
            new_awards = user.awards + [medal_name]
            user.awards = new_awards
            success_msg = f"‚úÖ –ú–µ–¥–∞–ª—å {medal_name} –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name}"
            user_msg = f"üéâ –í–∞–º –≤—Ä—É—á–µ–Ω–∞ –º–µ–¥–∞–ª—å: {medal_name}"

        elif action == "take":
            if medal_name not in user.awards:
                await callback.answer("‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —ç—Ç–æ–π –º–µ–¥–∞–ª–∏")
                return

            # –£–¥–∞–ª—è–µ–º –º–µ–¥–∞–ª—å
            new_awards = [m for m in user.awards if m != medal_name]
            user.awards = new_awards
            success_msg = f"‚úÖ –ú–µ–¥–∞–ª—å {medal_name} –∏–∑—ä—è—Ç–∞ —É {user.full_name}"
            user_msg = f"üòî –£ –≤–∞—Å –∏–∑—ä—è—Ç–∞ –º–µ–¥–∞–ª—å: {medal_name}"

        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
            return

        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        session.add(user)
        try:
            await session.commit()

            # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(user_id, user_msg)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

            # 7. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            await callback.message.edit_text(
                success_msg,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="admin_menu")]
                ])
            )
            await callback.answer()

        except Exception as e:
            await session.rollback()
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}", show_alert=True)
            print(f"–û—à–∏–±–∫–∞ –ë–î: {e}")

    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        await state.clear()

# ===== –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====
@router.callback_query(F.data == "admin_cancel")
async def admin_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="menu")]
        ])
    )


@router.callback_query(F.data == "admin_menu")
async def admin_menu(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π", callback_data="admin_news")],
        [InlineKeyboardButton(text="üèÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∞–ª—è–º–∏", callback_data="admin_medals")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
    ])
    await callback.message.edit_text(
        "üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )