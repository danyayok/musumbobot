from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import User
from storage import create_user, get_user

router = Router()


class PassCreate(StatesGroup):
    nickname = State()
    rank = State()
    town = State()


@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext, session: AsyncSession):
    if await get_user(session, message.from_user.id):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
            ]
        )
        await message.answer("–í—ã certified musumba —Å–∏—Ç–∏–∑–µ–Ω", reply_markup=keyboard)
        return

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                             [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_pressed")]
                         ]))


@router.callback_query(F.data == "continue_pressed")
async def on_continue(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π nickname:")
    await state.set_state(PassCreate.nickname)


@router.message(PassCreate.nickname)
async def get_nickname(message: Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ä–∞–Ω–≥:")
    await state.set_state(PassCreate.rank)


@router.message(PassCreate.rank)
async def get_rank(message: Message, state: FSMContext):
    await state.update_data(rank=message.text)
    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–æ—â–Ω—ã–π –ú—É—Å—É–º–±–∞", callback_data="gorod1")],
        [InlineKeyboardButton(text="–°–ª–∞–±—ã–π –õ—É–±–∞", callback_data="gorod2")],
        [InlineKeyboardButton(text="–ú—É—Å—É–º–±–∞–≥—Ä–∞–¥-–Ω–∞-–ö–æ–Ω–≥–æ", callback_data="gorod3")]
    ]))
    await state.set_state(PassCreate.town)


@router.callback_query(F.data.startswith("gorod"))
async def get_town(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    town_map = {
        "gorod1": "–ú–æ—â–Ω—ã–π –ú—É—Å—É–º–±–∞",
        "gorod2": "–°–ª–∞–±—ã–π –õ—É–±–∞",
        "gorod3": "–ú—É—Å—É–º–±–∞–≥—Ä–∞–¥-–Ω–∞-–ö–æ–Ω–≥–æ"
    }
    data = await state.get_data()
    data["town"] = town_map.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    await create_user(
        session=session,
        user_id=callback.from_user.id,
        data=data,
        first_name=callback.from_user.full_name,
        username=callback.from_user.username
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
        ]
    )
    await callback.message.answer("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω!", reply_markup=keyboard)
    await state.clear()
    user = await session.get(User, callback.from_user.id)
    print(user)

@router.message(F.text == "/passport")
async def show_passport(message: Message, session: AsyncSession):
    user = await get_user(session, message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø–∞—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ /start")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É (–µ—Å–ª–∏ created_at –µ—Å—Ç—å –≤ –º–æ–¥–µ–ª–∏)
    arrival_date = user.created_at.strftime("%d.%m.%Y") if hasattr(user, 'created_at') else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞
    passport_text = (
        "üìÑ –¢–≤–æ–π –ø–∞—Å–ø–æ—Ä—Ç:\n"
        f"üë§ –ù–∏–∫–Ω–µ–π–º: {user.nickname}\n"
        f"üìõ –ò–º—è: {user.full_name}\n"
        f"üéñ –†–∞–Ω–≥: {user.rank}\n"
        f"üèò –ì–æ—Ä–æ–¥: {user.town}\n"
        f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è: {arrival_date}\n"
        f"üéñ –ù–∞–≥—Ä–∞–¥—ã: {', '.join(user.awards) if user.awards else '–Ω–µ—Ç'}"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
        ]
    )
    await message.answer(passport_text, reply_markup=keyboard)


@router.callback_query(F.data == "menu_passport")
async def passport_via_callback(callback: CallbackQuery, session: AsyncSession):
    user = await get_user(session, callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø–∞—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ /start", show_alert=True)
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    arrival_date = user.created_at.strftime("%d.%m.%Y") if hasattr(user, 'created_at') else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞
    passport_text = (
        "üìÑ –¢–≤–æ–π –ø–∞—Å–ø–æ—Ä—Ç:\n"
        f"üë§ –ù–∏–∫–Ω–µ–π–º: {user.nickname}\n"
        f"üìõ –ò–º—è: {user.full_name}\n"
        f"üéñ –†–∞–Ω–≥: {user.rank}\n"
        f"üèò –ì–æ—Ä–æ–¥: {user.town}\n"
        f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è: {arrival_date}\n"
        f"üéñ –ù–∞–≥—Ä–∞–¥—ã: {', '.join(user.awards) if user.awards else '–Ω–µ—Ç'}"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
        ]
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
    await callback.message.answer(
        text=passport_text,
        reply_markup=keyboard
    )
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ